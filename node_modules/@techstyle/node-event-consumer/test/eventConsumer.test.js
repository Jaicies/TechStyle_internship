const EventConsumer = require('../src/eventConsumer');

const BROKER_LIST = [
  'tfgelsvmlxkfa03.corp.brandideas.com:9092',
  'tfgelsvmlxkfa04.corp.brandideas.com:9092',
  'tfgelsvmlxkfa05.corp.brandideas.com:9092',
];
const CLIENT_ID = 'echo-test';
const CA_FILE_PATH = 'caFile';
const ENVIRONMENT = 'test';

describe('eventConsumer.js Test', () => {
  describe('createClient validation tests', () => {
    test('clientId missing', async () => {
      const eventConsumer = new EventConsumer(BROKER_LIST, null, ENVIRONMENT,
        CA_FILE_PATH);
      await eventConsumer.createClient()
        .catch((ex) => {
          expect(ex.message).toEqual('Missing required parameter (clientId) for event consumer');
        });
    });

    test('brokerList missing', async () => {
      const eventConsumer = new EventConsumer(null, CLIENT_ID, ENVIRONMENT,
        CA_FILE_PATH);
      await eventConsumer.createClient()
        .catch((ex) => {
          expect(ex.message).toEqual('Missing required parameter (brokerList) for event consumer');
        });
    });

    test('environment missing', async () => {
      const eventConsumer = new EventConsumer(BROKER_LIST, CLIENT_ID, null,
        CA_FILE_PATH);
      await eventConsumer.createClient()
        .catch((ex) => {
          expect(ex.message).toEqual('Missing required parameter (environment) for event consumer');
        });
    });
    test('CA cert missing', async () => {
      const eventConsumer = new EventConsumer(BROKER_LIST, CLIENT_ID, ENVIRONMENT,
        null);
      await eventConsumer.createClient()
        .catch((ex) => {
          expect(ex.message).toEqual('Missing required parameter (KAFKA_CA_FILE) for event consumer');
        });
    });
  });

  describe('subscribeToEachMessage validation tests', () => {
    let eventConsumer;
    beforeAll(() => {
      eventConsumer = new EventConsumer(BROKER_LIST, CLIENT_ID, ENVIRONMENT, CA_FILE_PATH);
    });

    test('groupId missing', async () => {
      await eventConsumer.subscribeToEachMessage(null, null, null)
        .catch((ex) => {
          expect(ex.message).toEqual('Missing required parameter (groupId) for event consumer');
        });
    });

    test('topic missing', async () => {
      await eventConsumer.subscribeToEachMessage(1, null, null)
        .catch((ex) => {
          expect(ex.message).toEqual('Missing required parameter (topic) for event consumer');
        });
    });

    test('groupId missing', async () => {
      await eventConsumer.subscribeToEachMessage(1, 'testTopic', null)
        .catch((ex) => {
          expect(ex.message).toEqual('Missing required parameter (consumerCallback) for event consumer');
        });
    });
  });
});
